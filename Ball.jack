class Ball {
    field Vector2 startingPos;
    field int radius;
    field Vector2 pos;
    field Vector2 velocity;
    field int length;


    constructor Ball new(Vector2 apos) {
        let startingPos = apos;
        let pos = apos;

        let length = 10;

        let velocity = Vector2.new(1, 3);

        return this;
    }

    method void draw() {
        do Screen.setColor(true);
        do Screen.drawRectangle(pos.getX(), pos.getY(), pos.getX() + length, pos.getY() + length);

        return;
    }    

    method void erase() {
        do Screen.setColor(false);
        do Screen.drawRectangle(pos.getX(), pos.getY(), pos.getX() + length, pos.getY() + length);

        return;
    }

    method void move() {   
        do erase();

        do pos.add(velocity);

        if(pos.getX() > 500 | pos.getX() < 10) {
            do velocity.setX(-velocity.getX());
        }

        if(pos.getY() < 10) {
            do velocity.setY(-velocity.getY());
        }

        do draw();
        return;
    }

    method void HasCollidedWithPlayer(Vector2 pVec, int alen) {
        if(pos.getX() > pVec.getX() & pos.getX() < (pVec.getX() + alen)) {
            if((pos.getY() + length) > pVec.getY()) {
                do velocity.setY(-velocity.getY());  
            }
        }

        return;
    }

    method boolean hasGoneOutOfBounds() {
        if(pos.getY() > 230) {
            do erase();
            let pos = startingPos;
            do draw();
            return true;
        }

        return false;
    }

    method boolean hasHitABrick() {
        var int screenStart;
        var int memLoc;
        var int pixel;

        let screenStart = 16384;

        let memLoc = screenStart + (((pos.getY() - 2) * 32) + (pos.getX() / 16));

        if(Memory.peek(memLoc) = -1) {            
            do Screen.setColor(false);
            do Screen.drawRectangle(pos.getX() - 10, pos.getY() - 10, pos.getX(), pos.getY());
            do velocity.setY(-velocity.getY()); 
            return true; 
        }

        return false;
    }

    method int getX() {
        return pos.getX();
    }

    method int getY() {
        return pos.getY();
    }

    method void dispose() {
        do pos.dispose();
        do velocity.dispose();

        do Memory.deAlloc(this);

        return;
    }

}